import telebot
import requests
from telebot import types

TELEGRAM_BOT_TOKEN = '7391521133:AAF6J1pZpU3fKWwLsqClrG-IZSPhz5sRQBo'
API_KEY = 'c305a2fe285c771704a58a5b'

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

AVAILABLE_CURRENCIES = ['USD', 'EUR', 'KZT', 'RUB', 'GBP', 'CNY']
user_languages = {}

TEXTS = {
    'kk': {
        'start': "üí± *–í–∞–ª—é—Ç–∞ –∞–π—ã—Ä–±–∞—Å—Ç–∞—É –±–æ—Ç—ã*\n\n"
                 "üîπ –ú—ã—Å–∞–ª–¥–∞—Ä:\n"
                 "`/convert 100 USD KZT` ‚Äî 100 –¥–æ–ª–ª–∞—Ä–¥—ã —Ç–µ“£–≥–µ–≥–µ –∞–π—ã—Ä–±–∞—Å—Ç–∞–π–¥—ã\n"
                 "`/convert USD KZT` ‚Äî 1 –¥–æ–ª–ª–∞—Ä–¥—ã“£ —Ç–µ“£–≥–µ–≥–µ –±–∞“ì–∞–º—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ\n\n"
                 "üîπ –¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
        'choose': "–í–∞–ª—é—Ç–∞ –∂“±–±—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        'error': "–ë–∞“ì–∞–º–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –±–æ–ª–¥—ã.",
        'invalid': "‚ö†Ô∏è –ü–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑: /convert 100 USD KZT –Ω–µ–º–µ—Å–µ /convert USD KZT",
        'badval': "‚ùå “ö–∞—Ç–µ: –≤–∞–ª—é—Ç–∞ –¥“±—Ä—ã—Å –µ–º–µ—Å –Ω–µ–º–µ—Å–µ API “õ–∞—Ç–µ—Å—ñ.",
        'badnum': "‚ö†Ô∏è –°–æ–º–∞ —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫. –ú—ã—Å–∞–ª—ã: /convert 100 USD KZT",
        'unknown': "ü§ñ –ë–µ–ª–≥—ñ—Å—ñ–∑ –∫–æ–º–∞–Ω–¥–∞. –ù“±—Å“õ–∞—É–ª–∞—Ä “Ø—à—ñ–Ω /help –ø”ô—Ä–º–µ–Ω—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.",
        'language_set': "‚úÖ –¢—ñ–ª —Ç–∞“£–¥–∞–ª–¥—ã: “ö–∞–∑–∞“õ—à–∞",
        'select_lang': "üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    },
    'ru': {
        'start': "üí± *–ë–æ—Ç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –í–∞–ª—é—Ç*\n\n"
                 "üîπ –ü—Ä–∏–º–µ—Ä—ã:\n"
                 "`/convert 100 USD KZT` ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ç–µ–Ω–≥–µ\n"
                 "`/convert USD KZT` ‚Äî –ø–æ–∫–∞–∂–µ—Ç –∫—É—Ä—Å 1 –¥–æ–ª–ª–∞—Ä–∞ –≤ —Ç–µ–Ω–≥–µ\n\n"
                 "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã.",
        'choose': "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        'error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.",
        'invalid': "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert 100 USD KZT –∏–ª–∏ /convert USD KZT",
        'badval': "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API.",
        'badnum': "‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /convert 100 USD KZT",
        'unknown': "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
        'language_set': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        'select_lang': "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
    },
    'en': {
        'start': "üí± *Currency Converter Bot*\n\n"
                 "üîπ Examples:\n"
                 "`/convert 100 USD KZT` ‚Äî converts 100 dollars to tenge\n"
                 "`/convert USD KZT` ‚Äî shows rate of 1 dollar to tenge\n\n"
                 "üîπ Use buttons below to choose currencies.",
        'choose': "Choose a currency pair:",
        'error': "Error retrieving exchange rate.",
        'invalid': "‚ö†Ô∏è Use: /convert 100 USD KZT or /convert USD KZT",
        'badval': "‚ùå Error: invalid currency or API problem.",
        'badnum': "‚ö†Ô∏è Amount must be a number. Example: /convert 100 USD KZT",
        'unknown': "ü§ñ Unknown command. Use /help for instructions.",
        'language_set': "‚úÖ Language set: English",
        'select_lang': "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    }
}

def get_lang(message):
    return user_languages.get(message.chat.id, 'kk')

@bot.message_handler(commands=['start'])
def send_welcome(message):
    lang = get_lang(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('“ö–∞–∑–∞“õ—à–∞', '–†—É—Å—Å–∫–∏–π', 'English')
    bot.send_message(message.chat.id, TEXTS[lang]['select_lang'], reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ['“ö–∞–∑–∞“õ—à–∞', '–†—É—Å—Å–∫–∏–π', 'English'])
def set_language(message):
    lang_map = {
        '“ö–∞–∑–∞“õ—à–∞': 'kk',
        '–†—É—Å—Å–∫–∏–π': 'ru',
        'English': 'en'
    }
    lang = lang_map[message.text]
    user_languages[message.chat.id] = lang
    bot.send_message(message.chat.id, TEXTS[lang]['language_set'], reply_markup=types.ReplyKeyboardRemove())
    send_help(message)

@bot.message_handler(commands=['help'])
def send_help(message):
    lang = get_lang(message)
    bot.send_message(message.chat.id, TEXTS[lang]['start'], parse_mode="Markdown")
    show_currency_buttons(message, lang)

def show_currency_buttons(message, lang):
    markup = types.InlineKeyboardMarkup()
    for base in AVAILABLE_CURRENCIES:
        row = []
        for target in AVAILABLE_CURRENCIES:
            if base != target:
                button = types.InlineKeyboardButton(f"{base} ‚Üí {target}", callback_data=f"{base} {target}")
                row.append(button)
        markup.add(*row)
    bot.send_message(message.chat.id, TEXTS[lang]['choose'], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    base_currency, target_currency = call.data.split()
    exchange_rate = get_exchange_rate(base_currency, target_currency)
    lang = get_lang(call.message)
    if exchange_rate:
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"1 {base_currency} = {exchange_rate} {target_currency}")
    else:
        bot.send_message(call.message.chat.id, TEXTS[lang]['error'])

def get_exchange_rate(base_currency, target_currency):
    url = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/{base_currency}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['conversion_rates'].get(target_currency)
    return None

@bot.message_handler(commands=['convert'])
def convert_currency(message):
    lang = get_lang(message)
    try:
        parts = message.text.split()
        if len(parts) == 3:
            _, base_currency, target_currency = parts
            amount = 1.0
        elif len(parts) == 4:
            _, amount, base_currency, target_currency = parts
            amount = float(amount)
        else:
            bot.reply_to(message, TEXTS[lang]['invalid'])
            return

        exchange_rate = get_exchange_rate(base_currency.upper(), target_currency.upper())
        if exchange_rate:
            converted_amount = float(amount) * exchange_rate
            bot.reply_to(
                message,
                f'{amount} {base_currency.upper()} = {converted_amount:.2f} {target_currency.upper()}'
            )
        else:
            bot.reply_to(message, TEXTS[lang]['badval'])
    except ValueError:
        bot.reply_to(message, TEXTS[lang]['badnum'])
    except Exception as e:
        bot.reply_to(message, f'‚ö†Ô∏è {str(e)}')

@bot.message_handler(func=lambda message: True)
def fallback(message):
    lang = get_lang(message)
    bot.reply_to(message, TEXTS[lang]['unknown'])

if __name__ == '__main__':
    bot.polling()
